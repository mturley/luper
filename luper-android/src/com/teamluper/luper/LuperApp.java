// LuperApp.java
// adapted from boilerplate code generated by androidkickstartr.com on 2/22/13
// NOTE: I included the Spring RestTemplate option at androidkickstartr,
//       because I imagine we'll need to use REST to interact with the
//       database.  However, if we don't need it we can remove it.
// NOTE: ActionBarSherlock is a polyfill providing the new Android 4.2 ActionBar
//       functionality to all versions of android.  To compile this project
//       properly, the actionbarsherlock project must also be in your
//       workspace and/or build path in addition to the Luper project.

// TODO: use this as a skeleton and implement the rest of the app inside it.


package com.teamluper.luper;

import org.springframework.web.client.HttpClientErrorException;

import android.accounts.Account;
import android.accounts.AccountManager;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.DialogInterface.OnClickListener;
import android.os.Bundle;
import android.support.v4.app.FragmentTransaction;
import android.view.View;
import android.widget.TextView;
import android.widget.Toast;

import com.actionbarsherlock.app.ActionBar;
import com.actionbarsherlock.app.ActionBar.Tab;
import com.actionbarsherlock.app.ActionBar.TabListener;
import com.actionbarsherlock.app.SherlockActivity;
import com.actionbarsherlock.view.Menu;
import com.actionbarsherlock.view.MenuInflater;
import com.actionbarsherlock.view.MenuItem;
import com.teamluper.luper.AudioRecorderTest;
import com.googlecode.androidannotations.annotations.AfterViews;
import com.googlecode.androidannotations.annotations.Background;
import com.googlecode.androidannotations.annotations.EActivity;
import com.googlecode.androidannotations.annotations.UiThread;
import com.googlecode.androidannotations.annotations.ViewById;
import com.googlecode.androidannotations.annotations.rest.RestService;
import com.teamluper.luper.rest.LuperRestClient;

@EActivity(R.layout.activity_main)
public class LuperApp extends SherlockActivity implements TabListener {
  
  @ViewById
  TextView hello;
  @RestService
  LuperRestClient rest;
  private String[] locations;
  
  // Additional local variables
  AccountManager am;
  
  @Override
  protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    testRestAPI();
    testAccounts();
  }
 
  @AfterViews
  void afterViews() {
    locations = getResources().getStringArray(R.array.locations);
    configureActionBar();
  }
  
  @Override
  public boolean onCreateOptionsMenu(Menu menu) {
    MenuInflater inf = getSupportMenuInflater();
    inf.inflate(R.menu.activity_main, menu);
    return true;
  }

  private void configureActionBar() {
    getSupportActionBar().setNavigationMode(ActionBar.NAVIGATION_MODE_TABS);
    for (String location: locations) {
      Tab tab = getSupportActionBar().newTab();
      tab.setText(location);
      tab.setTabListener(this);
      getSupportActionBar().addTab(tab);
    }
  }
  
  @Override
  public void onTabSelected(Tab tab, FragmentTransaction ft) {
    // stub function!  TODO implement me
    Toast.makeText(getApplicationContext(), "TODO: CHANGE TAB TO "+tab.getText(), Toast.LENGTH_SHORT).show();
  }
  @Override
  public void onTabUnselected(Tab tab, FragmentTransaction ft) {
    // stub function!  TODO implement me
  }
  @Override
  public void onTabReselected(Tab tab, FragmentTransaction ft) {
    // stub function! TODO implement me
  }
  
  @Override
  public boolean onOptionsItemSelected(MenuItem item) {
    if(item.getItemId() == R.id.menu_settings) {
      Intent intent = new Intent(this, LuperSettings_.class);
      startActivity(intent);
    }
    return true;
  }
  
  //method to navigate to the audiorecorder activity
  public void startRecording(View view) {
  	Intent intent = new Intent(this, AudioRecorderTest.class);
  	startActivity(intent);
  }
  
  @Background
  void testRestAPI() {
    try {
      String t = rest.getTestString();
      alertDialog("Server Connection Test PASS!\n" +
          "Request: GET http://www.teamluper.com/api/test\n" +
          "Response: '"+t+"'\n\n" +
          "Welcome to our (almost) featureless Alpha Release!  " +
          "Check out the Settings and try the Record button.");
    } catch(HttpClientErrorException e) {
      alertDialog("Server Connection Test FAIL!\n" + e.toString());
    }
  }
  
  @Background
  void testAccounts() {
    am = AccountManager.get(this);
    Account[] accounts = am.getAccountsByType("com.google");
    System.out.println("== LUPER ACCOUNTS TESTING ==  found "+accounts.length+" accounts");
    for(int i=0; i<accounts.length; i++) {
      System.out.println(accounts[i].toString());
    }
  }
  
  @UiThread
  void toastMessage(String message) {
    Toast.makeText(getApplicationContext(), message, Toast.LENGTH_SHORT).show();
  }
  
  @UiThread
  void alertDialog(String message) {
    new AlertDialog.Builder(this)
    .setCancelable(false)
    .setMessage(message)
    .setPositiveButton("OK", new OnClickListener() {
      public void onClick(DialogInterface dialog, int which) {
        // do nothing
      }
    })
    .show();
  }
}
